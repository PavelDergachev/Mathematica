(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)
BeginPackage["BiotSavart`"];


(* ::Input::Initialization:: *)
WireColor::usage="\!\(\*
StyleBox[\"WireColor\",\nFontSlant->\"Italic\"]\) is a symbol rule for the color of a loop. Used in drawing the loop. See \!\(\*
StyleBox[\"DrawCurrentLoop\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"[\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"]\",\nFontSlant->\"Italic\"]\).";


(* ::Input::Initialization:: *)
WireSegment::usage="\!\(\*
StyleBox[\"WireSegment\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"[\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"{\",\nFontSlant->\"Italic\"]\)\!\(\*SubscriptBox[
StyleBox[\"p\",\nFontSlant->\"Italic\"], \(1\)]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*SubscriptBox[\(p\), \(2\)]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"...\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*SubscriptBox[\(p\), \(n\)]\)\!\(\*
StyleBox[\"}\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"current\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"colorspec\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"]\",\nFontSlant->\"Italic\"]\) defines a \!\(\*
StyleBox[\"current\",\nFontSlant->\"Italic\"]\) carrying wire with at least one straight segment defined by \!\(\*SubscriptBox[\(p\), \(1\)]\) and \!\(\*SubscriptBox[\(p\), \(2\)]\), and possibly all the way to \!\(\*SubscriptBox[
StyleBox[\"p\",\nFontSlant->\"Italic\"], \(n\)]\).  \!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)The \!\(\*
StyleBox[\"color\",\nFontSlant->\"Italic\"]\) of the wire is specified by a rule: \!\(\*
StyleBox[\"WireColor\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"->\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"color\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\".\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)See \!\(\*
StyleBox[\"Make\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"WireSegment\",\nFontSlant->\"Italic\"]\)[] for a constructor.";


(* ::Input::Initialization:: *)
WireRectangle::usage="\!\(\*
StyleBox[\"WireCircle\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"[\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"translation\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"direction\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"{\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"xlength\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"ywidth\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"angle\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"}\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"current\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"WireColor\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"\[Rule]\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"color\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"]\",\nFontSlant->\"Italic\"]\) defines a rectangular current loop in space. The current loop is defined to have its edges defined along the coordinate x and y axes, which are rotated anti-clockwise by the specified angle before the surface normal is tilted to direction. The current loop's normal points in the specified direction. The color of a loop is specified by a rule: \!\(\*
StyleBox[\"WireColor\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"\[Rule]\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"color\",\nFontSlant->\"Italic\"]\). See MakeWireRectangle[] for a constructor.";


(* ::Input::Initialization:: *)
WireCircle::usage="\!\(\*
StyleBox[\"WireCircle\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"[\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"translation\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"direction\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"radius\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"current\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"colorspec\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"]\",\nFontSlant->\"Italic\"]\) defines a circular current loop in space. The circle's surface normal points in the specified direction. The wire circle has a specified \!\(\*
StyleBox[\"radius\",\nFontSlant->\"Italic\"]\). The \!\(\*
StyleBox[\"color\",\nFontSlant->\"Italic\"]\) of the wire is specified by a rule: \!\(\*
StyleBox[\"WireColor\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"->\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"color\",\nFontSlant->\"Italic\"]\). See \!\(\*
StyleBox[\"MakeWireCircle\",\nFontSlant->\"Italic\"]\)[] for a constructor.";


(* ::Input::Initialization:: *)
WireCircularArc::usage="\!\(\*
StyleBox[\"WireCircle\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"[\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"translation\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"radius\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"{\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[SubscriptBox[
StyleBox[\"\[Theta]\",\nFontSlant->\"Italic\"], \"1\"],\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[SubscriptBox[
StyleBox[\"\[Theta]\",\nFontSlant->\"Italic\"], \"2\"],\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"}\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"current\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"colorspec\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"]\",\nFontSlant->\"Italic\"]\) defines a circular wire arc. See \!\(\*
StyleBox[\"MakeWireCircularArc\",\nFontSlant->\"Italic\"]\)[] for a constructor.";


(* ::Input::Initialization:: *)
WireEllipse::usage="NOT YET DEFINED. See \!\(\*
StyleBox[\"MakeWireEllipse\",\nFontSlant->\"Italic\"]\)[] for a constructor.";


(* ::Input::Initialization:: *)
WireEllipsoidalArc::usage="NOT YET DEFINED. See \!\(\*
StyleBox[\"MakeWireEllipsoidalArc\",\nFontSlant->\"Italic\"]\)[] for a constructor.";


(* ::Input::Initialization:: *)
WireSpline::usage="\!\(\*
StyleBox[\"WireSpline\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"[\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"{\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[SubscriptBox[\"p\", \"1\"],\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[SubscriptBox[\"p\", \"2\"],\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[SubscriptBox[\"p\", \"3\"],\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[SubscriptBox[\"p\", \"4\"],\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"}\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"current\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"colorspec\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"]\",\nFontSlant->\"Italic\"]\) defines a spline shaped wire in space. The four control points \!\(\*
StyleBox[\"{\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[SubscriptBox[\"p\", \"1\"],\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[SubscriptBox[\"p\", \"2\"],\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[SubscriptBox[\"p\", \"3\"],\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[SubscriptBox[\"p\", \"4\"],\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"}\",\nFontSlant->\"Italic\"]\) are specified with 3 cartesian coordinates. The \!\(\*
StyleBox[\"color\",\nFontSlant->\"Italic\"]\) of the wire is specified by a rule: \!\(\*
StyleBox[\"WireColor\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"->\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"color\",\nFontSlant->\"Italic\"]\). See \!\(\*
StyleBox[\"MakeWireSpline\",\nFontSlant->\"Italic\"]\)[] for a constructor.";


(* ::Input::Initialization:: *)
MakeWireSegment::usage="\!\(\*
StyleBox[\"MakeWireSegment\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"[\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"{\",\nFontSlant->\"Italic\"]\)\!\(\*SubscriptBox[
StyleBox[\"p\",\nFontSlant->\"Italic\"], \(1\)]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*SubscriptBox[\(p\), \(2\)]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"...\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*SubscriptBox[\(p\), \(n\)]\)\!\(\*
StyleBox[\"}\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"current\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"WireColor\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"\[Rule]\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"color\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"]\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"defines\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"a\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"wire\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"  \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"as\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"a\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"set\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"of\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"straight\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"segments\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"specified\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"by\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*SubscriptBox[
StyleBox[\"p\",\nFontSlant->\"Italic\"], \(1\)]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*SubscriptBox[\(p\), \(2\)]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"...\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*SubscriptBox[\(p\), \(n\)]\)\!\(\*
StyleBox[\".\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)At least two coordinates are expected\!\(\*
StyleBox[\".\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"WireColor\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"\[Rule]\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"color\",\nFontSlant->\"Italic\"]\) specifies the colour of the line.  The function returns a WireSegment[] object.";


(* ::Input::Initialization:: *)
MakeWireRectangle::usage="NOT YET DEFINED. The function returns a WireRectangle[] object.";


(* ::Input::Initialization:: *)
MakeWireCircle::usage="\!\(\*
StyleBox[\"MakeWireCircle\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"[\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"radius\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"current\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"opts\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"]\",\nFontSlant->\"Italic\"]\) defines a planar circular current loop, with given radius and anti-clockwise current intensity. The loop lies in the x-y plane, centered at the origin. \!\(\*
StyleBox[\"WireColor\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"\[Rule]\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"c\",\nFontSlant->\"Italic\"]\) specifies the colour of the line. \n \!\(\*
StyleBox[\"MakeWireCircle\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"[\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"position\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"radius\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"current\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"opts\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"]\",\nFontSlant->\"Italic\"]\) additionally specifies an offset of the current loop w.r.t. the origin. \n \!\(\*
StyleBox[\"MakeWireCircle\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"[\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"position\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"direction\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"radius\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"current\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"opts\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"]\",\nFontSlant->\"Italic\"]\) additionally specifies the direction of the loop's surface normal. The function returns a WireCircle[] object.";


(* ::Input::Initialization:: *)
MakeWireCircularArc::usage="\!\(\*
StyleBox[\"MakeWireCircle\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"[\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"radius\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"{\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[SubscriptBox[
StyleBox[\"\[Theta]\",\nFontSlant->\"Italic\"], \"1\"],\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[SubscriptBox[
StyleBox[\"\[Theta]\",\nFontSlant->\"Italic\"], \"2\"],\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"}\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"current\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"opts\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"]\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"defines\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"a\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"circular\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"arc\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"wire\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"lying\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"in\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"the\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"x\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"-\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"y\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"plane\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"whose\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"end\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"points\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"are\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"specified\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"by\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"two\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"rotation\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"angles\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"about\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"the\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"z\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"-\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"axis\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"and\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"measured\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"anti\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"-\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"clockwise\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"from\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"the\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"x\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"-\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"axis\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\".\",\nFontSlant->\"Italic\"]\)";


(* ::Input::Initialization:: *)
MakeWireEllipse::usage="Not defined.";


(* ::Input::Initialization:: *)
MakeWireEllipsoidalArc::usage="Not defined.";


(* ::Input::Initialization:: *)
MakeWireSpline::usage="\!\(\*
StyleBox[\"MakeWireSpline\",\nFontSlant->\"Italic\"]\)[{\!\(\*SubscriptBox[
StyleBox[\"p\",\nFontSlant->\"Italic\"], \(1\)]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*SubscriptBox[\(p\), \(2\)]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*SubscriptBox[
StyleBox[\"p\",\nFontSlant->\"Italic\"], \(3\)]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*SubscriptBox[\(p\), \(4\)]\)}\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"current\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"WireColor\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"\[Rule]\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"color\",\nFontSlant->\"Italic\"]\)] defines a Bezier spline wire with four control points. The first and last points lie on the line. The other two points control the curvature of the line, and also define the tangents at the start and end points. Since no compact expression is available, the field values for the spline are determined by numerical integration.";


(* ::Input::Initialization:: *)
DrawWire::usage="\!\(\*
StyleBox[\"DrawWire\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"[\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"wireobject\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"]\",\nFontSlant->\"Italic\"]\) produces a 3D graphic of a \!\(\*
StyleBox[\"wireobject\",\nFontSlant->\"Italic\"]\). The \!\(\*
StyleBox[\"wireobject\",\nFontSlant->\"Italic\"]\) must be specified as one or more \!\(\*
StyleBox[\"WireSegment\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"[\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"]\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\) \!\(\*
StyleBox[\"WireRectangle\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"[\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"]\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)or\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"WireCircle\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"[\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"]\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"WireCircularArc\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"[\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"]\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"WireEllipse\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"[\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"]\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"WireEllipsoidalArc\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"or\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"WireSpline\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"[\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"]\",\nFontSlant->\"Italic\"]\) objects.";


(* ::Input::Initialization:: *)
MagneticVectorPotential::usage="Watch this spot";


(* ::Input::Initialization:: *)
MagneticInduction::usage="\!\(\*
StyleBox[\"MagneticInduction\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"[\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"{\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"x\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"y\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"z\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"}\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"wireobject\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"]\",\nFontSlant->\"Italic\"]\) computes the cartesian vector magnetic induction of a \!\(\*
StyleBox[\"wireobject\",\nFontSlant->\"Italic\"]\) at the specified \!\(\*
StyleBox[\"{\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"x\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"y\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"z\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"}\",\nFontSlant->\"Italic\"]\) position. This evaluation point may be symbolic, yielding an en expression. The \!\(\*
StyleBox[\"wireobject\",\nFontSlant->\"Italic\"]\) must be specified as one or more \!\(\*
StyleBox[\"WireSegment\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"[\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"]\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"WireCircle\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"[\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"]\",\nFontSlant->\"Italic\"]\) or \!\(\*
StyleBox[\"WireRectangle\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"[\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"]\",\nFontSlant->\"Italic\"]\) objects.";


(* ::Input::Initialization:: *)
MagneticInductionGradient::usage="Watch this spot";


(* ::Input::Initialization:: *)
LorenzForce::usage="Watch this spot";


(* ::Input::Initialization:: *)
Begin["Private`"];


(* ::Input::Initialization:: *)
Options[MakeWireSegment]={WireColor->Red};

MakeWireSegment[positions:{{_,_,_},{_,_,_},___},current_,opts:OptionsPattern[]]:=
Block[{rules}, 
rules=FilterRules[{opts}, Options[MakeWireRectangle]];
WireSegment[positions,current, WireColor->(WireColor/.Join[rules,Options[MakeWireRectangle]])]
];


(* ::Input::Initialization:: *)
Options[MakeWireRectangle]={WireColor->Red};

MakeWireRectangle[edge_,current_,opts:OptionsPattern[]]:=
Block[{rules},
rules=FilterRules[{opts}, Options[MakeWireRectangle]];
WireRectangle[{0,0,0},{0,0,1},{edge,edge,0},current,WireColor->(WireColor/.Join[rules,Options[MakeWireRectangle]])]
];

MakeWireRectangle[position:{_,_,_},edge_,current_,opts:OptionsPattern[]]:=
Block[{rules},
rules=FilterRules[{opts}, Options[MakeWireRectangle]];
WireRectangle[position,{0,0,1},{edge,edge,0},current,WireColor->(WireColor/.Join[rules,Options[MakeWireRectangle]])]
];

MakeWireRectangle[position:{_,_,_},direction:{_,_,_},{xedge_,yedge_,angle_},current_,opts:OptionsPattern[]]:=
Block[{rules},
rules=FilterRules[{opts}, Options[MakeWireRectangle]];
WireRectangle[position,direction/Norm[direction],{xedge,yedge,angle},current,WireColor->(WireColor/.Join[rules,Options[MakeWireRectangle]])]
];


(* ::Input::Initialization:: *)
Options[MakeWireCircle]={WireColor->Red};

MakeWireCircle[radius_,current_,opts:OptionsPattern[]]:=Block[{rules},
rules=FilterRules[{opts}, Options[MakeWireCircle]];
WireCircle[{0,0,0},{0,0,1},radius,current,WireColor->(WireColor/.Join[rules,Options[MakeWireCircle]])]
];

MakeWireCircle[position:{_,_,_},radius_,current_,opts:OptionsPattern[]]:=Block[{rules},
rules=FilterRules[{opts}, Options[MakeWireCircle]];
WireCircle[position,{0,0,1},radius,current,WireColor->(WireColor/.Join[rules,Options[MakeWireCircle]])]
];

MakeWireCircle[position:{_,_,_},direction:{_,_,_},radius_,current_,opts:OptionsPattern[]]:=Block[{rules},
rules=FilterRules[{opts}, Options[MakeWireCircle]];
WireCircle[position,direction/Norm[direction],radius,current,WireColor->(WireColor/.Join[rules,Options[MakeWireCircle]])]
];


(* ::Input::Initialization:: *)
Options[MakeWireCircularArc]={WireColor->Red};

MakeWireCircularArc[radius_,{theta0_,theta1_},current_,opts:OptionsPattern[]]:=Block[{rules},
rules=FilterRules[{opts}, Options[MakeWireCircularArc]];
WireCircularArc[{0,0,0},{0,0,1},radius,{theta0,theta1},current,WireColor->(WireColor/.Join[rules,Options[MakeWireCircularArc]])]
];

MakeWireCircularArc[translation:{_,_,_},radius_,{theta0_,theta1_},current_,opts:OptionsPattern[]]:=Block[{rules},
rules=FilterRules[{opts}, Options[MakeWireCircularArc]];
WireCircularArc[translation,{0,0,1},radius,{theta0,theta1},current,WireColor->(WireColor/.Join[rules,Options[MakeWireCircularArc]])]
];

MakeWireCircularArc[translation:{_,_,_},direction:{_,_,_},radius_,{theta0_,theta1_},current_,opts:OptionsPattern[]]:=Block[{rules},
rules=FilterRules[{opts}, Options[MakeWireCircularArc]];
WireCircularArc[translation,direction/Norm[direction],radius,{theta0,theta1},current,WireColor->(WireColor/.Join[rules,Options[MakeWireCircularArc]])]
];


(* ::Input::Initialization:: *)
Options[MakeWireEllipse]={WireColor->Red};



(* ::Input::Initialization:: *)
Options[MakeWireEllipsoidalArc]={WireColor->Red};



(* ::Input::Initialization:: *)
Options[MakeWireSpline]={WireColor->Red};

MakeWireSpline[positions:{{_,_,_},{_,_,_},{_,_,_},{_,_,_}},current_,opts:OptionsPattern[]]:=
Block[{rules}, 
rules=FilterRules[{opts}, Options[MakeWireSpline]];
WireSpline[positions,current, WireColor->(WireColor/.Join[rules,Options[MakeWireSpline]])]
];


(* ::Input::Initialization:: *)
Options[DrawWire]={WireColor->Red};

DrawWire[l:{__},opts:OptionsPattern[]]:=DrawWire[#,opts]&/@l;


(* ::Input::Initialization:: *)
DrawWire[l:WireSegment[positions:{{_,_,_},{_,_,_},___},current_,color_],opts:OptionsPattern[]]:=
Block[{rules},
rules=FilterRules[{opts}, Options[DrawWire]];
If[Sign[current]==-1,
{WireColor/.Join[rules,{color}],Arrow[Tube[Reverse[positions]]]},
{WireColor/.Join[rules,{color}],Arrow[Tube[positions]]}
]
];


(* ::Input::Initialization:: *)
DrawWire[l:WireRectangle[translation:{_,_,_},direction:{_,_,_},{xedge_,yedge_,angle_},current_,color_],opts:OptionsPattern[]]:=Block[{coordinates,rules},
rules=FilterRules[{opts}, Options[DrawWire]];
coordinates=(RotationMatrix[angle,{0,0,1}].#)&/@{{-(xedge/2),-(yedge/2),0},{xedge/2,-(yedge/2),0},{xedge/2,yedge/2,0},{-(xedge/2),yedge/2,0},{-(xedge/2),-(yedge/2),0}};
If[Sign[current]==-1,
coordinates=Reverse[(RotationMatrix[{{0,0,1},direction}].#+translation)&/@coordinates],
coordinates=(RotationMatrix[{{0,0,1},direction}].#+translation)&/@coordinates
];
{WireColor/.Join[rules,{color}],Arrow[Tube[coordinates,xedge 0.01],xedge 0.05]}
];


(* ::Input::Initialization:: *)
DrawWire[l:WireCircle[translation:{_,_,_},direction:{_,_,_},radius_,current_,color_],opts:OptionsPattern[]]:=Block[{coordinates,rules},
rules=FilterRules[{opts}, Options[DrawWire]];
If[Sign[current]==-1,
coordinates=Reverse[(RotationMatrix[{{0,0,1},direction}].{radius Sin[#],radius Cos[#],0}+translation)&/@(Range[n=41,0,-1]*(2\[Pi]/n))],
coordinates=(RotationMatrix[{{0,0,1},direction}].{radius Sin[#],radius Cos[#],0}+translation)&/@(Range[n=41,0,-1]*(2\[Pi]/n))];
{WireColor/.Join[rules,{color}],Arrow[Tube[coordinates,radius 0.01],radius 0.05]}
];


(* ::Input::Initialization:: *)
DrawWire[l:WireCircularArc[translation:{_,_,_},direction:{_,_,_},radius_,{theta0_,theta1_},current_,color_],opts:OptionsPattern[]]:=
Block[{coordinates,rules,npoints},
rules=FilterRules[{opts}, Options[DrawWire]];
npoints=IntegerPart[41(theta1-theta0)/2\[Pi]]+2;
If[Sign[current]==-1,
coordinates=Reverse[(RotationMatrix[{{0,0,1},direction}].{radius Sin[#],radius Cos[#],0}+translation)&/@(Range[npoints,0,-1]*((theta1-theta0)/npoints)+theta1)],
coordinates=(RotationMatrix[{{0,0,1},direction}].{radius Sin[#],radius Cos[#],0}+translation)&/@(Range[npoints,0,-1]*((theta1-theta0)/npoints)+theta1)];
{WireColor/.Join[rules,{color}],Arrow[Tube[coordinates,radius 0.01],radius 0.05]}
];


(* ::Input::Initialization:: *)
DrawWire[l:WireSpline[positions:{{_,_,_},{_,_,_},{_,_,_},{_,_,_}},current_,color_],opts:OptionsPattern[]]:=
Block[{rules},
rules=FilterRules[{opts}, Options[DrawWire]];
If[Sign[current]==-1,
{WireColor/.Join[rules,{color}],Arrow[Tube[BezierCurve[Reverse[positions]]]]},
{WireColor/.Join[rules,{color}],Arrow[Tube[BezierCurve[positions]]]}
]
];


(* ::Input::Initialization:: *)
MagneticVectorPotential[p:{_,_,_},WireSegment[positions:{{_,_,_},{_,_,_},___},current_,color_]]:=Block[{LineSegment,t,s},
LineSegment[start:{_,_,_},end:{_,_,_}]:=Block[{v},
v=end-start;
t=RotationMatrix[{v,{0,0,1}}];
s=RotationMatrix[{-v,{0,0,1}}];
s.NormalWireSegmentMagneticVectorPotential[t.(p-start),Sqrt[v.v]]
];
10^-7 current (Plus@@((LineSegment@@#)&/@Partition[positions,2,1]))
];

NormalWireSegmentMagneticVectorPotential[{x_,y_,z_},end_]:=
{0,0,-ArcSinh[-z/(x^2+y^2)]+ArcSinh[(end-z)/(x^2+y^2)]};


(* ::Input::Initialization:: *)
MagneticInduction[p:{x_,y_,z_}, l:WireSegment[positions:{{_,_,_},{_,_,_},___},current_,color_]]:=
Block[{LineSegment,t,s},
LineSegment[start:{_,_,_},end:{_,_,_}]:=Block[{v},
v=end-start;
t=RotationMatrix[{v,{0,0,1}}];
s=RotationMatrix[{-v,{0,0,1}}];
s.NormalWireSegmentMagneticInduction[t.(p-start),Sqrt[v.v]]
];
10^-7 current (Plus@@((LineSegment@@#)&/@Partition[positions,2,1]))
];

NormalWireSegmentMagneticInduction[{x_,y_,z_},end_]:=
{-y,x,0}(z/Sqrt[x^2+y^2+z^2]+(end-z)/Sqrt[x^2+y^2+(end-z)^2])/(x^2+y^2);


(* ::Input::Initialization:: *)
MagneticInductionGradient[p:{_,_,_},WireSegment[positions:{{_,_,_},{_,_,_},___},current_,color_]]:=Block[{LineSegment,t,s},
LineSegment[start:{_,_,_},end:{_,_,_}]:=Block[{v},
v=end-start;
t=RotationMatrix[{v,{0,0,1}}];
s=RotationMatrix[{-v,{0,0,1}}];
s.NormalWireSegmentMMagneticInductionGradient[t.(p-start),Sqrt[v.v]]
];
10^-7 current (Plus@@((LineSegment@@#)&/@Partition[positions,2,1]))
];

NormalWireSegmentMMagneticInductionGradient[{x_,y_,z_},end_]:=
{0,0,0};


(* ::Input::Initialization:: *)
MagneticVectorPotential[{_,_,_},r:WireRectangle[position:{_,_,_},direction:{_,_,_},{xedge_,yedge_,angle_},current_,color_]]:=0;


(* ::Input::Initialization:: *)
MagneticInduction[{x_,y_,z_},l:WireRectangle[position:{_,_,_},direction:{_,_,_},{xedge_,yedge_,angle_},current_,color_]]:=
Block[{t,s},
If[direction[[1]]==direction[[2]]==0,
t=RotationMatrix[angle,{0,0,1}];
s=RotationMatrix[-angle,{0,0,1}],
t=RotationMatrix[{{0,0,1},direction}].RotationMatrix[angle,{0,0,1}];
s=RotationMatrix[-angle,{0,0,1}].RotationMatrix[{direction,{0,0,1}}]
];
s.NormalWireRectangleMagneticInduction[t.({x,y,z}-position),{xedge,yedge},current]
];

NormalWireRectangleMagneticInduction[{x_,y_,z_},{xedge_,yedge_},current_]:=
Block[{\[Mu]0=4\[Pi] 10^-7,C,d,r},
C={(xedge/2+x),(xedge/2-x),-(xedge/2-x),-(xedge/2+x)};
d={(y+yedge/2),(y+yedge/2),(y-yedge/2),(y-yedge/2)};
r={Sqrt[C[[1]]^2+d[[1]]^2+z^2],Sqrt[C[[2]]^2+d[[2]]^2+z^2],
Sqrt[C[[3]]^2+d[[3]]^2+z^2],Sqrt[C[[4]]^2+d[[4]]^2+z^2]};
If[r[[1]]==0||r[[2]]==0||r[[3]]==0||r[[4]]==0,
Return[{0,0,0}]
];

{(\[Mu]0 current)/(4\[Pi]) Plus@@((((-1)^(#+1) z)/(r[[#]](r[[#]]+d[[#]])))&/@Range[4]),
(\[Mu]0 current)/(4\[Pi]) Plus@@((((-1)^(#+1) z)/(r[[#]](r[[#]]+(-1)^(#+1) C[[#]])))&/@Range[4]),
(\[Mu]0 current)/(4\[Pi]) Plus@@((((-1)^# d[[#]])/(r[[#]](r[[#]]+(-1)^(#+1) C[[#]]))-(C[[#]]/(r[[#]](r[[#]]+d[[#]]))))&/@Range[4])}
];


(* ::Input::Initialization:: *)
End[];
EndPackage[];


(* ::Input::Initialization:: *)
MagneticVectorPotential[{_,_,_},l:WireCircle[{_,_,_},{_,_,_},0,_,_]]:=0;


(* ::Input::Initialization:: *)
MagneticInduction[{_,_,_},WireCircle[{_,_,_},{_,_,_},0,_,_]]:={Indeterminate,Indeterminate,Indeterminate};

MagneticInduction[{x_,y_,z_},l:WireCircle[position:{_,_,_},direction:{_,_,_},radius_,current_,color_]]:=
Block[{t,s},
If[direction[[1]]==direction[[2]]==0,
t=s=IdentityMatrix[3],
t=RotationMatrix[{{0,0,1},direction}];
s=RotationMatrix[{direction,{0,0,1}}]
];
s.NormalWireCircleMagneticInduction[t.({x,y,z}-position),radius,current]
];

NormalWireCircleMagneticInduction[{x_,y_,z_},radius_,current_]:=
Block[{rad2,r2,\[Rho]2,\[Alpha]2,\[Beta]2,\[Gamma],k2,tmp,\[Mu]0=4\[Pi] 10^-7,big=1000, verybig=1000000},
rad2=radius^2;
r2=x^2+y^2+z^2;
\[Rho]2=x^2+y^2;

 If[(\[Rho]2<=(radius/verybig)^2),
Return[ \[Mu]0 current rad2 {(0.75 x z)/Power[rad2+z^2, (5/2)^-1],(0.75 y z)/Power[rad2+z^2, (5/2)^-1],0.5 /Power[rad2+z^2, (3/2)^-1]}]
]; (* Escape formula for positions close to the axis *)

If[r2>rad2 big,
Return[(\[Mu]0 current rad2)/(2Power[r2, (3/2)^-1]) {0,0,1}]
];(* Escape formula for positions far from the axis *)

\[Alpha]2=rad2+r2-2 radius Sqrt[\[Rho]2];
\[Beta]2=rad2+r2+2 radius Sqrt[\[Rho]2];
\[Gamma]=x^2-y^2;
k2=1-\[Alpha]2/\[Beta]2; (* k^2= m *)
(\[Mu]0 current)/(2\[Pi] \[Alpha]2 Sqrt[\[Beta]2]) {(x z)/\[Rho]2 (tmp=((rad2+r2)EllipticE[k2]-\[Alpha]2 EllipticK[k2])),
(y z)/\[Rho]2 tmp,
((rad2-r2)EllipticE[k2]+\[Alpha]2 EllipticK[k2])}
]; 


(* ::Input::Initialization:: *)

NormalLoopGradMagneticInduction[{x_,y_,z_},radius_,current_]:=Block[{C,a2,a4,a6,r2,x2,y2,z2,x4,z4,\[Rho]2,\[Alpha]2,\[Beta]2,\[Gamma],k2,dBxdx,dBxdy,dBxdz,dBydx,dBydy,dBydz,dBzdx,dBzdy,dBzdz},
C=4 10^-7 current;
a2=radius^2;
a4=a2^2;
a6=a2^3;
x2=x^2;
y2=y^2;
z2=z^2;
x4=x2^2;
z4=z2^2;
r2=x2+y2+z2;
\[Rho]2=x2+y2;
\[Alpha]2=a2+r2-2 radius Sqrt[\[Rho]2];
\[Beta]2=a2+r2+2 radius Sqrt[\[Rho]2];
\[Gamma]=x2-y2;
k2=1-\[Alpha]2/\[Beta]2; (* k^2= m *)

dBxdx=(C  z)/(2 \[Alpha]2^2Sqrt[\[Beta]2]^3 \[Rho]2) ((a4(-\[Gamma](3 z2+a2)+\[Rho]2(8x2-y2))-a2(\[Rho]2^2(5x2+y2)-2\[Rho]2 z2(2x2+y2)+3z4 \[Gamma])-r2^2(2x4+\[Gamma](y2+z2)))EllipticE[k2]+(a2(\[Gamma](a2+2z2)-\[Rho]2(3x2-2y2))+r2(2x4+\[Gamma](y2+z2)))\[Alpha]2 EllipticK[k2]);
dBxdy=(C x y z)/(2 \[Alpha]2^2Sqrt[\[Beta]2]^3 \[Rho]2^2) ((3a4(3\[Rho]2-2z2)-r2^2(2r2+\[Rho]2)-2a6-2a2(2\[Rho]2^2-\[Rho]2 z2+3z4))EllipticE[k2]-(r2(2r2+\[Rho]2)-a2(5\[Rho]2-4z2)+2a4)\[Alpha]2 EllipticK[k2]);
dBxdz=(C x)/(2 \[Alpha]2^2Sqrt[\[Beta]2]^3 \[Rho]2) (((\[Rho]2-a2)^2(\[Rho]2+a2)+2z2(a4-6a2 \[Rho]2+\[Rho]2^2)+z4(a2+\[Rho]2))EllipticE[k2]-((\[Rho]2-a2)^2+z2(\[Rho]2+a2))\[Alpha]2 EllipticK[k2]);

dBydx=dBxdy;
dBydy=(C  z)/(2 \[Alpha]2^2Sqrt[\[Beta]2]^3 \[Rho]2) ((a4(\[Gamma](3z2+a2)+\[Rho]2(8y2-x2))-a2(\[Rho]2^2(5y2+x2)-2\[Rho]2 z2(2z2+x2)-3z4 \[Gamma])-r2^2(2y2^2-\[Gamma](x2+z2)))EllipticE[k2]+(a2(-\[Gamma](a2+2z2)-\[Rho]2(3y2-2x2))+r2(2y2^2-\[Gamma](x2+y2)))\[Alpha]2 EllipticK[k2]);
dBydz=y/x dBxdz; 

dBzdx=dBxdz;
dBzdy=dBydz;
dBzdz=(C z)/(2\[Alpha]2 Sqrt[\[Beta]2]^3) ((6a2(\[Rho]2-z2)-7a4+r2^2)EllipticE[k2]+\[Alpha]2(a2-r2)EllipticK[k2]);
{{dBxdx,dBxdy,dBxdz},{dBydx,dBydy,dBydz},{dBzdx,dBzdy,dBzdz}}
];


(* ::Input::Initialization:: *)
MagneticVectorPotential[p:{_,_,_},WireCircularArc[positions:{{_,_,_},{_,_,_},{_,_,_},{_,_,_}},current_,color_]]:={0,0,0};

NormalWireCircularArcMagneticVectorPotential[{x_,y_,z_},end_]:=
{0,0,0};


(* ::Input::Initialization:: *)
MagneticInduction[p:{x_,y_,z_}, WireCircularArc[positions:{{_,_,_},{_,_,_},{_,_,_},{_,_,_}},current_,color_]]:={0,0,0};

NormalWireCircularArcMagneticInduction[{x_,y_,z_},end_]:=
{0,0,0};


(* ::Input::Initialization:: *)
MagneticInductionGradient[p:{_,_,_},WireCircularArc[positions:{{_,_,_},{_,_,_},{_,_,_},{_,_,_}},current_,color_]]:={0,0,0};

NormalWireCircularArcMagneticVectorPotential[{x_,y_,z_},end_]:=
{0,0,0};


(* ::Input::Initialization:: *)
MagneticVectorPotential[p:{_,_,_},WireEllipse[positions:{{_,_,_},{_,_,_},{_,_,_},{_,_,_}},current_,color_]]:={0,0,0};

NormalWireEllipseMagneticVectorPotential[{x_,y_,z_},end_]:=
{0,0,0};


(* ::Input::Initialization:: *)
MagneticInduction[p:{x_,y_,z_}, WireEllipse[positions:{{_,_,_},{_,_,_},{_,_,_},{_,_,_}},current_,color_]]:={0,0,0};

NormalWireEllipseMagneticInduction[{x_,y_,z_},end_]:=
{0,0,0};


(* ::Input::Initialization:: *)
MagneticInductionGradient[p:{_,_,_},WireEllipse[positions:{{_,_,_},{_,_,_},{_,_,_},{_,_,_}},current_,color_]]:={0,0,0};

NormalWireEllipseMagneticVectorPotential[{x_,y_,z_},end_]:=
{0,0,0};


(* ::Input::Initialization:: *)
MagneticVectorPotential[p:{_,_,_},WireEllipsoidalArc[positions:{{_,_,_},{_,_,_},{_,_,_},{_,_,_}},current_,color_]]:={0,0,0};

NormalWireEllipsoidalArcMagneticVectorPotential[{x_,y_,z_},end_]:=
{0,0,0};


(* ::Input::Initialization:: *)
MagneticInduction[p:{x_,y_,z_}, WireEllipsoidalArc[positions:{{_,_,_},{_,_,_},{_,_,_},{_,_,_}},current_,color_]]:={0,0,0};

NormalWireEllipsoidalArcMagneticInduction[{x_,y_,z_},end_]:=
{0,0,0};


(* ::Input::Initialization:: *)
MagneticInductionGradient[p:{_,_,_},WireEllipsoidalArc[positions:{{_,_,_},{_,_,_},{_,_,_},{_,_,_}},current_,color_]]:={0,0,0};

NormalWireEllipsoidalArcMagneticVectorPotential[{x_,y_,z_},end_]:=
{0,0,0};


(* ::Input::Initialization:: *)
MagneticVectorPotential[p:{_,_,_},WireSpline[positions:{{_,_,_},{_,_,_},{_,_,_},{_,_,_}},current_,color_]]:=
Block[{basis,equations,t},
basis={-(-1+t)^3,3 (-1+t)^2,-3 (-1+t) t^2,t^3};
equations=(basis.#)&/@Transpose[positions];
10^-7 current NIntegrate[equations/Norm[equations-p],{t,0,1},Method->"MonteCarlo"]
];


(* ::Input::Initialization:: *)
MagneticInduction[p:{x_,y_,z_}, WireSpline[positions:{{_,_,_},{_,_,_},{_,_,_},{_,_,_}},current_,color_]]:={0,0,0};

NormalWireSplineMagneticInduction[{x_,y_,z_},end_]:=
{0,0,0};


(* ::Input::Initialization:: *)
MagneticInductionGradient[p:{_,_,_},WireSpline[positions:{{_,_,_},{_,_,_},{_,_,_},{_,_,_}},current_,color_]]:={0,0,0};

NormalWireSplineMagneticVectorPotential[{x_,y_,z_},end_]:=
{0,0,0};
